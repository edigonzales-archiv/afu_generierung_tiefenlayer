import ch.so.agi.gretl.api.*
import ch.so.agi.gretl.tasks.*

apply plugin: 'ch.so.agi.gretl'

//def targetDbUrl = "jdbc:postgresql://geodb-dev.cgjofbdf5rqg.eu-central-1.rds.amazonaws.com/xanadu2"
//def targetDbUser = "stefan"
//def targetDbPass = System.env.targetDbPass
def targetDbUrl = "jdbc:postgresql://192.168.50.5/sogis"
def targetDbUser = "ddluser"
def targetDbPass = "ddluser"

def dbSchema = "afu_generierung_tiefenlayer"
def dbSchemaStaging = "afu_generierung_tiefenlayer_staging"

task createSchemaAndTables(type: Ili2pgImportSchema) {
    description = "Erstellt das Schema und die leeren Tabellen anhand des INTERLIS-Modelles."
    database = [targetDbUrl, targetDbUser, targetDbPass]
    models = "SO_AFU_Generierung_Tiefenlayer_20180318"
    modeldir = "http://models.geo.admin.ch;../../ili/" 
    dbschema = dbSchema
    nameByTopic = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    createUnique = true
    createNumChecks = true
    createEnumTabs = true
    strokeArcs = true
    defaultSrsCode = 2056
    logFile = "ili2pg.log"
}

task copyDataFromStaging(type: Db2Db) {
    description = "Kopiert das 3D-Modell aus dem Staging in die Modellstruktur."
    sourceDb =  [targetDbUrl, targetDbUser, targetDbPass]
    targetDb = [targetDbUrl, targetDbUser, targetDbPass]
    transferSets = [
            new TransferSet("sql/copy-ebene-daten-dhm.sql", dbSchema + ".grundlagen_dhm", true),
    ]
}
